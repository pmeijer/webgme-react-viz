/*globals define, _, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 04 2018 16:27:16 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Constants',
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'common/util/guid',
    './reactViz.bundle',
    'css!./reactViz.bundle.css'
], function (
    CONSTANTS,
    PanelBaseWithHeader,
    IActivePanel,
    guid,
    reactViz
) {
    'use strict';

    const WebGMEReactPanels = {};

    function WebGMEReactVizPanel(layoutManager, params) {
        const options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'WebGMEReactVizPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        WebGMEGlobal.WebGMEReactPanels = WebGMEReactPanels;

        this._client = params.client;

        this.appId = 'react-viz-id-' + guid();

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    }

    //inherit from PanelBaseWithHeader
    _.extend(WebGMEReactVizPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(WebGMEReactVizPanel.prototype, IActivePanel.prototype);

    WebGMEReactVizPanel.prototype._initialize = function () {
        this.$el.prop('id', this.appId);
        const initialState = {
            // The UI state, these can be modified by the react app as well.
            activeObject: WebGMEGlobal.State.getActiveObject(),
            activeSelection: WebGMEGlobal.State.getActiveSelection(),
            activeTab: WebGMEGlobal.State.getActiveTab(),
            activeAspect: WebGMEGlobal.State.getActiveAspect(),

            // Panel state (are passed in by the e.g. split-panel)
            isActive: false,
            isReadOnly: false,
            size: {
                width: 0,
                height: 0,
            },
        };

        WebGMEReactPanels[this.appId] = {
            client: this._client,
            initialized: false,
            initialState
        };

        // The $el element does not exist in the DOM yet.
        setTimeout(()=> {
            reactViz(this.appId);
            this.onActivate();
        });
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    WebGMEReactVizPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);
    };

    WebGMEReactVizPanel.prototype.onResize = function (width, height) {
        // this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        // this.widget.onWidgetContainerResize(width, height);
    };

    WebGMEReactVizPanel.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        console.log(WebGMEReactPanels[this.appId].initialized);
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            //this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    WebGMEReactVizPanel.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    WebGMEReactVizPanel.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    WebGMEReactVizPanel.prototype.destroy = function () {
        this._detachClientEventListeners();
        WebGMEReactPanels[this.appId].destroy();
        delete WebGMEReactPanels[this.appId];
        PanelBaseWithHeader.prototype.destroy.call(this);
    };

    WebGMEReactVizPanel.prototype.onActivate = function () {
        this._attachClientEventListeners();
        console.log('onActivate', WebGMEReactPanels[this.appId].initialized);
        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    WebGMEReactVizPanel.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
    };

    return WebGMEReactVizPanel;
});
