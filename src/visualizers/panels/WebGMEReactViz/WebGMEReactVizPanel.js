/*globals define, _, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 04 2018 16:27:16 GMT-0500 (Central Daylight Time).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'widgets/WebGMEReactViz/WebGMEReactVizWidget',
    './WebGMEReactVizControl',
    'webgme-react-viz/static/js/main.bece31e5',
    'css!webgme-react-viz/static/css/main.a267f5fe.css'
], function (
    PanelBaseWithHeader,
    IActivePanel,
    WebGMEReactVizWidget,
    WebGMEReactVizControl,
    reactApp
) {
    'use strict';

    var WebGMEReactVizPanel;

    WebGMEReactVizPanel = function (layoutManager, params) {
        var options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'WebGMEReactVizPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;


        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    };

    //inherit from PanelBaseWithHeader
    _.extend(WebGMEReactVizPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(WebGMEReactVizPanel.prototype, IActivePanel.prototype);

    WebGMEReactVizPanel.prototype._initialize = function () {
        var self = this;
        let id = 'react-viz-id';

        this.$el.prop('id', id);

        // The $el element does not exist yet.
        setTimeout(()=> {
            reactApp(id);
            setTimeout(()=> {
                // This timeout is just to get the spinner..
                window.onGMEInit(self._client)
            }, 1000);
        });


        // this.widget = new WebGMEReactVizWidget(this.logger, this.$el);
        //
        // this.widget.setTitle = function (title) {
        //     self.setTitle(title);
        // };

        // this.control = new WebGMEReactVizControl({
        //     logger: this.logger,
        //     client: this._client,
        //     widget: this.widget
        // });

        //this.onActivate();
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    WebGMEReactVizPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    WebGMEReactVizPanel.prototype.onResize = function (width, height) {
        // this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        // this.widget.onWidgetContainerResize(width, height);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    WebGMEReactVizPanel.prototype.destroy = function () {
        // this.control.destroy();
        // this.widget.destroy();
        //
        PanelBaseWithHeader.prototype.destroy.call(this);
        // WebGMEGlobal.KeyboardManager.setListener(undefined);
        // WebGMEGlobal.Toolbar.refresh();
    };

    WebGMEReactVizPanel.prototype.onActivate = function () {
        // this.widget.onActivate();
        // this.control.onActivate();
        // WebGMEGlobal.KeyboardManager.setListener(this.widget);
        // WebGMEGlobal.Toolbar.refresh();
    };

    WebGMEReactVizPanel.prototype.onDeactivate = function () {
        // this.widget.onDeactivate();
        // this.control.onDeactivate();
        // WebGMEGlobal.KeyboardManager.setListener(undefined);
        // WebGMEGlobal.Toolbar.refresh();
    };

    return WebGMEReactVizPanel;
});
